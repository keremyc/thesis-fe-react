{"ast":null,"code":"var _jsxFileName = \"/home/kerem/thesis-fe-react/src/components/MainContent/MyRecommendations.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useContext, useState } from \"react\";\nimport AuthContext from \"../../store/auth-context/AuthContext\";\nimport WebsiteCard from \"./WebSites/WebsiteCard\";\nimport WebSiteCards from \"./WebSites/WebSiteCards\";\nimport WebSiteComment from \"./WebSites/WebSiteComment\";\nimport WebSiteComments from \"./WebSites/WebSiteComments\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction MyRecommendations(props) {\n  _s();\n\n  const auth = useContext(AuthContext);\n  const [recommendations, setRecommendations] = useState();\n  useEffect(() => {\n    fetch(`http://localhost:8080/api/users/${auth.username}/recs`, {\n      headers: {\n        Authorization: `Bearer ${auth.token}`\n      }\n    }).then(response => {\n      if (!response.ok) {\n        alert(\"Failed while retrieving recommendations\");\n      }\n\n      return response.json();\n    }).then(data => {\n      console.log(data);\n      setRecommendations(data);\n    });\n  }, []);\n\n  function getWebPages(recommendations) {\n    let webPages = [];\n\n    if (recommendations) {\n      recommendations.map(rec => {\n        webPages.push(rec.recommendedWebPage);\n      });\n    }\n\n    console.log(\"webpages:\" + webPages);\n    return webPages;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(WebSiteCards, {\n      websites: getWebPages(recommendations),\n      onSelectCard: props.onSelectCard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 8\n    }, this)\n  }, void 0, false);\n}\n\n_s(MyRecommendations, \"mWKxOvtYx/pyFyhZe1HPu/IWFM8=\");\n\n_c = MyRecommendations;\nexport default MyRecommendations;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyRecommendations\");","map":{"version":3,"sources":["/home/kerem/thesis-fe-react/src/components/MainContent/MyRecommendations.js"],"names":["useEffect","useContext","useState","AuthContext","WebsiteCard","WebSiteCards","WebSiteComment","WebSiteComments","MyRecommendations","props","auth","recommendations","setRecommendations","fetch","username","headers","Authorization","token","then","response","ok","alert","json","data","console","log","getWebPages","webPages","map","rec","push","recommendedWebPage","onSelectCard"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,UAApB,EAAgCC,QAAhC,QAAgD,OAAhD;AACA,OAAOC,WAAP,MAAwB,sCAAxB;AAEA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,eAAP,MAA4B,4BAA5B;;;;AAEA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAAA;;AAChC,QAAMC,IAAI,GAAGT,UAAU,CAACE,WAAD,CAAvB;AACA,QAAM,CAACQ,eAAD,EAAkBC,kBAAlB,IAAwCV,QAAQ,EAAtD;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,KAAK,CAAE,mCAAkCH,IAAI,CAACI,QAAS,OAAlD,EAA0D;AAC7DC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASN,IAAI,CAACO,KAAM;AAD7B;AADoD,KAA1D,CAAL,CAKGC,IALH,CAKSC,QAAD,IAAc;AAClB,UAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChBC,QAAAA,KAAK,CAAC,yCAAD,CAAL;AACD;;AACD,aAAOF,QAAQ,CAACG,IAAT,EAAP;AACD,KAVH,EAWGJ,IAXH,CAWSK,IAAD,IAAU;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAX,MAAAA,kBAAkB,CAACW,IAAD,CAAlB;AACD,KAdH;AAeD,GAhBQ,EAgBN,EAhBM,CAAT;;AAmBA,WAASG,WAAT,CAAqBf,eAArB,EAAsC;AAClC,QAAIgB,QAAQ,GAAG,EAAf;;AACA,QAAIhB,eAAJ,EAAqB;AACjBA,MAAAA,eAAe,CAACiB,GAAhB,CAAqBC,GAAD,IAAS;AACzBF,QAAAA,QAAQ,CAACG,IAAT,CAAcD,GAAG,CAACE,kBAAlB;AACH,OAFD;AAGH;;AACDP,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAcE,QAA1B;AACA,WAAOA,QAAP;AACH;;AAED,sBACE;AAAA,2BACG,QAAC,YAAD;AAAc,MAAA,QAAQ,EAAED,WAAW,CAACf,eAAD,CAAnC;AAAsD,MAAA,YAAY,EAAEF,KAAK,CAACuB;AAA1E;AAAA;AAAA;AAAA;AAAA;AADH,mBADF;AAKD;;GAvCQxB,iB;;KAAAA,iB;AAyCT,eAAeA,iBAAf","sourcesContent":["import { useEffect, useContext, useState } from \"react\";\nimport AuthContext from \"../../store/auth-context/AuthContext\";\n\nimport WebsiteCard from \"./WebSites/WebsiteCard\";\nimport WebSiteCards from \"./WebSites/WebSiteCards\";\nimport WebSiteComment from \"./WebSites/WebSiteComment\";\nimport WebSiteComments from \"./WebSites/WebSiteComments\";\n\nfunction MyRecommendations(props) {\n  const auth = useContext(AuthContext);\n  const [recommendations, setRecommendations] = useState();\n\n  useEffect(() => {\n    fetch(`http://localhost:8080/api/users/${auth.username}/recs`, {\n      headers: {\n        Authorization: `Bearer ${auth.token}`,\n      },\n    })\n      .then((response) => {\n        if (!response.ok) {\n          alert(\"Failed while retrieving recommendations\");\n        }\n        return response.json();\n      })\n      .then((data) => {\n        console.log(data);\n        setRecommendations(data);\n      });\n  }, []);\n\n\n  function getWebPages(recommendations) {\n      let webPages = [];\n      if (recommendations) {\n          recommendations.map((rec) => {\n              webPages.push(rec.recommendedWebPage);\n          })\n      }\n      console.log(\"webpages:\" + webPages)\n      return webPages;\n  }\n\n  return (\n    <>\n      {<WebSiteCards websites={getWebPages(recommendations)} onSelectCard={props.onSelectCard} />}\n    </>\n  );\n}\n\nexport default MyRecommendations;\n"]},"metadata":{},"sourceType":"module"}