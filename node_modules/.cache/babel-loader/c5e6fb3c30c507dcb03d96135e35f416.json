{"ast":null,"code":"var _jsxFileName = \"/home/kerem/thesis-fe-react/src/components/MainContent/SearchResults.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport SortPanel from \"./WebSites/SortPanel\";\nimport WebSiteCards from \"./WebSites/WebSiteCards\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SearchResults(props) {\n  _s();\n\n  const [searchResults, setSearchResults] = useState([]);\n  const location = useLocation();\n  const history = useHistory();\n  const searchParams = new URLSearchParams(location.search);\n  console.log(searchParams);\n  const searchText = searchParams.get(\"query\");\n  console.log(searchText);\n\n  if (!searchText) {\n    history.push(\"/home\");\n  }\n\n  useEffect(() => {\n    fetch(\"http://localhost:8080/api/search?query=\" + searchText).then(response => {\n      if (!response.ok) {\n        throw new Error(\"Error: Couldn't perform search operation\");\n      }\n\n      return response.json();\n    }).then(data => {\n      console.log(data);\n      setSearchResults(data);\n    }).catch(err => {\n      alert(err.message);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: searchResults && searchResults.map(site => /*#__PURE__*/_jsxDEV(WebSiteCards, {\n      websites: searchResults,\n      onSelectCard: props.onSelectCard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }, this))\n  }, void 0, false);\n}\n\n_s(SearchResults, \"RG7dK7IDaMFW4cdwXMfxwUEBCXM=\", false, function () {\n  return [useLocation, useHistory];\n});\n\n_c = SearchResults;\nexport default SearchResults;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchResults\");","map":{"version":3,"sources":["/home/kerem/thesis-fe-react/src/components/MainContent/SearchResults.js"],"names":["useEffect","useState","useHistory","useLocation","SortPanel","WebSiteCards","SearchResults","props","searchResults","setSearchResults","location","history","searchParams","URLSearchParams","search","console","log","searchText","get","push","fetch","then","response","ok","Error","json","data","catch","err","alert","message","map","site","onSelectCard"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,kBAAxC;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;;;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AAC5B,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,EAAD,CAAlD;AAEA,QAAMS,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAMQ,OAAO,GAAGT,UAAU,EAA1B;AACA,QAAMU,YAAY,GAAG,IAAIC,eAAJ,CAAoBH,QAAQ,CAACI,MAA7B,CAArB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ;AACA,QAAMK,UAAU,GAAGL,YAAY,CAACM,GAAb,CAAiB,OAAjB,CAAnB;AAEAH,EAAAA,OAAO,CAACC,GAAR,CAAYC,UAAZ;;AAEA,MAAI,CAACA,UAAL,EAAiB;AACfN,IAAAA,OAAO,CAACQ,IAAR,CAAa,OAAb;AACD;;AAEDnB,EAAAA,SAAS,CAAC,MAAM;AACdoB,IAAAA,KAAK,CAAC,4CAA4CH,UAA7C,CAAL,CACGI,IADH,CACSC,QAAD,IAAc;AAClB,UAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAED,aAAOF,QAAQ,CAACG,IAAT,EAAP;AACD,KAPH,EAQGJ,IARH,CAQSK,IAAD,IAAU;AACdX,MAAAA,OAAO,CAACC,GAAR,CAAYU,IAAZ;AACAjB,MAAAA,gBAAgB,CAACiB,IAAD,CAAhB;AACD,KAXH,EAYGC,KAZH,CAYUC,GAAD,IAAS;AACdC,MAAAA,KAAK,CAACD,GAAG,CAACE,OAAL,CAAL;AACD,KAdH;AAeD,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA,sBACE;AAAA,cACGtB,aAAa,IACZA,aAAa,CAACuB,GAAd,CAAmBC,IAAD,iBAChB,QAAC,YAAD;AACE,MAAA,QAAQ,EAAExB,aADZ;AAEE,MAAA,YAAY,EAAED,KAAK,CAAC0B;AAFtB;AAAA;AAAA;AAAA;AAAA,YADF;AAFJ,mBADF;AAWD;;GA5CQ3B,a;UAGUH,W,EACDD,U;;;KAJTI,a;AA8CT,eAAeA,aAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport SortPanel from \"./WebSites/SortPanel\";\nimport WebSiteCards from \"./WebSites/WebSiteCards\";\n\nfunction SearchResults(props) {\n  const [searchResults, setSearchResults] = useState([]);\n\n  const location = useLocation();\n  const history = useHistory();\n  const searchParams = new URLSearchParams(location.search);\n  console.log(searchParams);\n  const searchText = searchParams.get(\"query\");\n\n  console.log(searchText);\n\n  if (!searchText) {\n    history.push(\"/home\");\n  }\n\n  useEffect(() => {\n    fetch(\"http://localhost:8080/api/search?query=\" + searchText)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"Error: Couldn't perform search operation\");\n        }\n\n        return response.json();\n      })\n      .then((data) => {\n        console.log(data);\n        setSearchResults(data);\n      })\n      .catch((err) => {\n        alert(err.message);\n      });\n  }, []);\n\n  return (\n    <>\n      {searchResults &&\n        searchResults.map((site) => (\n          <WebSiteCards\n            websites={searchResults}\n            onSelectCard={props.onSelectCard}\n          />\n        ))}\n    </>\n  );\n}\n\nexport default SearchResults;\n"]},"metadata":{},"sourceType":"module"}